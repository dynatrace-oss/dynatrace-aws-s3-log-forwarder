os: linux
dist: jammy
addons:
  apt:
    sources:
      - sourceline: 'deb https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable'
    packages:
      - docker-buildx-plugin

if: fork = false

language: shell

notifications:
  email:
    recipients:
      secure: ej6/5zNDDQUhSqobhxnp+x23cAnd6Jg9Fu6Dh7PFtMeHfn8xHkLDb0qsZ75B9vRoI1cwuTTw7hzmxkA4EbAdr8Sl/mZMZJOmHLUKZ6zz/Or9Um0Cg7be1lzBogXVXE/zXnhy4nYZ7ga3VbK0553L6aBfCbkiixy7fiR8Hvt0GgME3Gp3lgpj4S7Hjdhx3IiKFAW0zuzQPrlGVjFLmxzTtEp+ActSiaBghB59qbHhqTmbj4UPMZdKhQV/Heho18eYmpk2y7uYo+aCFLjDhtmzfnhZCRG4ZNTO7MfyailUMcu3MGss9CA9NPmRGaEUHR+Qu2rIe66aDdJaQX1zifSVvV3NW74vLJ1AbqOcGK2ZdrjPSrG78AWX+Cvb31ZjHoo6+5QUa8hfcOedmbBj6hdn+4ev59FknjIC5JjEzq6keflhPbOfaGlIMbZCwoAnk+Ulc5ZEAnRHrAQ1UG+w/Zr/DhtoC1T13uG6WGbSESIqr1U3fV70cs6Uh2JPRU4MUs7WqY3erhtPfVtLbnM+9YCA0JGHkT8CB2PeVVjkPvH3/iCOoEo0VY1/v6ppQugsO5QdoVw48XmW4UEHVQOhemwQzDcAVRnBMxsCDaOrf7+Oh7yUHuOhLYp/UXKkqOIqoq2FOPMXxqSqxhbs4gfXMqcQrB4GUDJxWc1Jg5q15bowjhQ=
    on_success: never
    on_failure: always
  slack:
    secure: TVc7fv1HD7wnuS3ZDqiGaUYqXEYLo8e8Bh8Wi25HwdvQahTLO3N58+92IdfL/duvAePmp7pQZ9iPH/AmWTDphCmHAIZeoBzjShcTdFRumWwwnE1UobYOncDnIulnCURi+x2yroZ4LMTAmbfDEP6Tk+93CaOhw/Dv5uB42Ili/TFe9yid7OvamP47rLBmZuyCnO6DOcn1nvhOL5+7eOz6VedpBCzfRliOi+T9c762HXXVFV/WUKWkAm4wMfKwCamSoR6XKIPOP9Wq7F5SqTnU6YOexjzsREoBXtN1IRkTsk8IbWFnNC7GDZzndXlr39hbbCv3eS60IminJRFckP1sfTOCJW0hyvTuLDPSC2nEoGlj+JHwmyWiTveqgcldpP9jK1PLRy/iAGbLRuuj7keEORsskUNk9o3WyOu3hHHkQgoI0HItnVBzYfgL/AO7fxm1wfX4YfWjQlXuqZ0rGAuG4bj08ovamHenM2PzQG6n7NVNHxLeYWHo/meJ+qoETJ0T4kYKqjusGkSsX7n+qngl/b+0RHPiO6NmSnJzTP8ptLGPKI54+n4RsTmAynL363DH0cioGK97VWRWTmVWTSGinAz3Xz97IhBknMkaar3A7LqktSY/zAbUm78YzStB2uTLL2xzJVajZdu6CobYRgBhGL2HiLtry06jwVt4moez4Yg=

env:
  global:
  - secure: "ca+f4GNyaCGFy0JDdgCOKE0npIt/kG7HvEdZ+a6zay2QZsnV3jGsXCKBdiydcX0bnmLbfi5rMu6nRNkO0zc/OjUhik65lR0t5ZUHSLyZBj5riUhHvnkUV65i/sj9TzNPkNPREh/SpXmXzhSFTIcayRdNGJ64H+rjzZ+29BIELg0TAHIbU8m7A3Kl82q4WLmKMUTUSWGskflk8t9AGzOyPMJ2OxKIJ1D8BStUYW3DrZoVmWWHCVmA/mJtGBfAzTWe2bncvH2AF5LiuDX70PYDr2pK+/07IjVZr/eV8RRltKxIsdnA5iL4FEm9rN/CgXYkh0ShpoA5XRfvJxHd0MNw8WJ9khoq4tAl8/1oEPyCBUawJoWxlloOf4QNIL4KRYGqZjYiJUeIHAFrw4S+nqqsEZpmSGWhPxR/wkIWqgaATaqykbbYOu/zvk9o+nQYuwnTAcmDZouOCewdABL58yiaPUGNfqcHvWBtaVuaHNebGiAVkh3e4fEnoj6SopdLkYJYV2o431p4osUJbK5+vZgH7MdUyzlSwPj2vyh4EjAxYQoZOOOi3642zh2zKUqXWOVfJVsbKlE22WlRwQyzM0V3CC7arADsvlYVHZjPf8r0gQ1Zqi0jM0j1Gu83r7O0BXF1n+uSdf5Jgxezu5f26LXPyoqlpJorGLfws9jQ95eBaMA="
  - secure: "QXlCxVGa9AXc2I9TPRlaKPluhPRozcHDjBZNWBo2C1s+avQJk4mZG8O5CNKsmtQtCFsM8Z0Yd6sgfHADhHgJonq2LUOyZijEf2t9R2wQ0ESJLZzzdeSKiwi6z+B6o44irtmLJShOa1J2ndUbizpQd91/tzlcBewzRcoYXfZptQRDpAl65+iZ4OWlxfusJTpsvzmeuc92BuYu/rWHD+o5G1MA9yQxCidhpE2ukj/WIqYpX0D2m7xT9R96Y5063UqF2lvhYYQqDnfx7CxxvUH12u86O6tt3pjDwYkUr1rzraDqS1j+ZIx0eA4MGpdFjiA5FZyGfyzoqcWh/mWyyeEGXTBmBf3WWz8XG4BoFMHqCEYGuKAEUM9b8j7ZlsuhryEuO69tF+yk22FMP1bLym6Sm/5sunblZ1UzsXvF3vzGY03WuJ2L2AiuLeIeNV3aoY0dRMQb4mZVqS3MJ6sc8YnuRvRGq6FE2g6eUtfE7U7ugmn6nlD44YumpdGjQ3R7uc9ZqqO4uoDoeh+ALUZ/864ye5wdkuDo9MvQMKXzyrh9c8ySIdlaasjxQMekndRE+ImT7dOZ90DyInAfwLW0EWZEgnobayPFA3tEPpO1gJX91XF+yEPw2A8v2ACWPFZsUaDfYJRq6kkTkHWU0j39F7gAUQSaXjvEegSw7EFfQW5OmZg="
  - secure: oUMamNk0dvAj+wueUL4RwIRtEWhboFu0oVvkDkgQJDMpykOl23ZFPxyd+PPSjtKzrzpfIWgE5r5z4q7hS+r9S+xoAl3lVpq7ASUgZZKoMGuXdJ9Tcl6aycKYkCIYpFKWaD4oweh5TL2Ted9BMNniya8SqD94VLpUKVZDQUI29igKr/mGqErF9aDKfKH7J8+eZkPUdzjBc/bxOewK8N5pwRVcObTGIFDU0n4E3aq44lz+gXYTYw/gPt2XCjxWMHIMLfF+JKe62mO3Z5k25+a7wgaQ7Mpfm7dc0YMn8alGeHBUvxzo5XW6Q/+x9v2T20WQXM8KlZy/aQqVvaTGLOcNUWF9oYzU0TBlIL07/FVtS2Sd/Z/FkHiw8YtSeGasmAnx25Nk51X72WbOdiiY8tjhQnV7p+ok3PviuQe/vCDCIHLy2F1/QimovJ02+aePkXs0GIfVqlog4oOXiSCBC11Z5+jDbX4SrKJhGlOJRyY3A8cKi2tkropzWY3063TOhstkChHKV2QGVEFAbRhKU+MxV6vP1kbRcdbRCWoARyIZDMzHBesuHjiLHb+inZHfRRWKenUecj+U+UmM/QZeHmH4pwKEKo0m9iN6cS26f5wWxM/y3C9tX1OxTl6LgKeHLtxAg9EFVLs6tP7rW/Na1DSLHimEbiUHA8AIH7ZkD01R1YA=
  - secure: vSgdt2TqQ6uz3nOBqesacOCmgA8l7ixu4Wfx5LoDUJ02I+yynEvUy+zzVNSgFCCTTMaBZ8Tn1bKgUP16UMCO/3QSPp1c9Qb3Nf9E7/c7pKrj1L31u3xx30y+h2ziiUyaaa1OWzdZkpA+HH2Y86NSKOv9pTJrE39DHSNdftMW4RE6PYndfVMiHmOgDJ+tYhh720mFNlkFuDZhm6BPiGGSbfrDFf1ly0oUNsk9+v+5GPM+xMSuSFYJZSm1DCagxrLnEdWSx/s/mYuNTz4SuPn63H3r7mFiQWwEXw9tKz0cTQBYFaHJ3/Q/qDEvCpiC+QQaL5z5yZzV9M03mQzrMOZpYwBtLcepnUEhsO5xUJXzOpxL5OPPlewOI8xbGAG2bandCV9XlvSxdR+TkE5lgVsiT7abBH0ppVZs4z0jIPrLkH857nJhWHE3+5xutIs8c/nfV6zeASUQ/nIFS1CscOZbWRN1Doys2LEBb74ogJl8deW9kxcTcP0bxuuJGV56WkC0Zertsqbn7wMEHIUhnVjWItQBvyKbmuu2+WG+ol0U25UJjw7q9/BQ6qdlyBKlfBuF+wIHsfvk7j0hxvSQeqIbEbS7RtiYzwlV+QBF6+QArGGvC7khtgdT0h+7pQ+cdDt7hUk9dNLq1rdKejANFUWGUH1hsL56qEg1RzckV3YGv10=

before_install:
  - |
    # before_install: Install AWS CLI and download Lambda Layers
    # Get CPU architecture
    
    if [[ $TRAVIS_CPU_ARCH == "amd64" ]]; then export LAMBDA_ARCH=x86_64; export AWSCLI_ARCH=x86_64; elif [[ ${TRAVIS_CPU_ARCH:0:5} == "arm64" ]]; then export LAMBDA_ARCH=arm64; export AWSCLI_ARCH=aarch64; fi

    # install yq and AWS CLI
    ./scripts/install_tools.sh
    
    # Get dependent lambda layers
    bash get-required-lambda-layers.sh
    
    # Define env vars
    export COMMIT=${TRAVIS_COMMIT:0:7}
    export STACK_NAME=e2e-dt-aws-s3-log-forwarder-${TRAVIS_BUILD_ID}
    export E2E_TESTING_BUCKET_NAME=dynatrace-aws-s3-log-forwarder-e2e-testing

    # CloudFormation Mappings don't support "_" in names, so we need to match mapping name x86
    export MAPPING=$(if [[ $LAMBDA_ARCH == "x86_64" ]];then echo "x86"; else echo $LAMBDA_ARCH; fi )
    export LAMBDA_BASE_IMAGE_TAG=$(cat template.yaml | yq ".Mappings.LambdaBaseImageMap.${MAPPING}.Tag")
    
jobs:
  include:
  - stage: validate-cfn-templates
    name: Validate CloudFormation Templates
    script:
      - aws cloudformation validate-template --template-body file://template.yaml
      - aws cloudformation validate-template --template-body file://dynatrace-aws-s3-log-forwarder-configuration.yaml
      - aws cloudformation validate-template --template-body file://dynatrace-aws-s3-log-forwarder-s3-bucket-configuration.yaml
      - aws cloudformation validate-template --template-body file://eventbridge-cross-region-or-account-forward-rules.yaml

  - stage: unit_tests
    name: Unit Tests
    services:
    - docker
    script:
      # Build container image with dev dependencies
      - |
        docker build --progress=plain -t queueprocessingfunction:test --build-arg ARCH=$LAMBDA_ARCH  \
          --build-arg LAMBDA_BASE_IMAGE_TAG=${LAMBDA_BASE_IMAGE_TAG} --build-arg ENABLE_LAMBDA_INSIGHTS="false" --build-arg ENV="DEV" .
      # Run unit tests
      - |
        docker run --entrypoint="" --mount type=bind,source=${TRAVIS_BUILD_DIR}/tests,target=/var/task/tests --env-file=tests/unit/unit_test.env \
          queueprocessingfunction:test python -m unittest discover -s tests -b

  - stage: build
    name: Build
    script:
      - ./scripts/update_version.sh
      # Build container image
      - |
        docker build -t dynatrace-aws-s3-log-forwarder:${COMMIT}-${LAMBDA_ARCH} . --build-arg ARCH=$LAMBDA_ARCH \
                     --build-arg ENABLE_LAMBDA_INSIGHTS="false" --build-arg LAMBDA_BASE_IMAGE_TAG=${LAMBDA_BASE_IMAGE_TAG}
      # Log in to ECR
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY_URL
        
      # Push image
      - docker tag dynatrace-aws-s3-log-forwarder:${COMMIT}-${LAMBDA_ARCH} ${ECR_REPOSITORY_URL}/dynatrace-aws-s3-log-forwarder:${COMMIT}-${LAMBDA_ARCH}
      - docker push ${ECR_REPOSITORY_URL}/dynatrace-aws-s3-log-forwarder:${COMMIT}-${LAMBDA_ARCH}
  
  - stage: end-to-end-test
    name: End-to-end deployment test
    if: fork = false AND ( branch == main OR type == pull_request )
    install:
      - pip install argparse requests
    script:
      - ./tests/e2e/deploy_forwarder_for_validation.sh

      # Write logs to S3 and allow time for ingestion
      - |
        echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] E2E testing validation log entry" > ${TRAVIS_BUILD_ID}.log
        aws s3 cp ${TRAVIS_BUILD_ID}.log s3://${E2E_TESTING_BUCKET_NAME}/test/${TRAVIS_BUILD_ID}/validation/test_log.log
        sleep 120
      
      # Validate log entry
      - ./tests/e2e/validate_logs_exist.py --bucket ${E2E_TESTING_BUCKET_NAME} --key test/${TRAVIS_BUILD_ID}/validation/test_log.log
    
    after_script: 
      - ./tests/e2e/clean_up_resources.sh
  
  - stage: release-container-image
    name: Release Container Image
    if: tag =~ /^v.*$/
    env:
      secure: "LOfFZOiMB7l3O+jyE4Gge6gtJjPutKGKZawF5UIJqrVjDWvw9d3StwI8Kl+1MKFELvlmrU4Q2JsziWvdES7n8yU033LF4NiKMy+VQXHs+b6RVidVOZq+6InaKr0PDUqnPIwMtLIiSSaVwZ8tXBtmxcvzg5qEL6pGi0z93sunoiygrf/248CNfLopQHiE4KC8Q8KWXImbgduOZsOETIy0ksvUJRjf1rwWTdZQ7R/IcUXHlW4MXtY2IXrnkcXjP9jIu3olEGe561lFUiPkR6xMMJTRfrZF7bkFWvMuhzE1Qf6Hv4PqvIDfWoSwb3EmgMTXyS+oIik68+fKIrJ+XCIez4gXM5MGvr2U9WZeRnoiAWWhGkB3Hsk8e/zW36sCdpcuWx8FyTZ6fOC5xFIhT79YtRAYFEPlMQmgWNhjgMXbauldL5rX0Y5IMhHr0UkImXHHDepeSYayg+2+B+bfTaRcoOwElljtZPhOQFRP0OyXqsJFjaRTHShKxguH2ZW0e/sq3il1rufGIuu1mGAPuIB0q8u1PcxbmgahQXC36DomtNi1OtEpZ4kqj4upUr36Qvb9uJlDwF2rpRBL/JcCpkVd5YMeVxsImMpo0gM/NEhOsLEu5UvpufHxstL3/qT+HAULj+rdGk0vDQ82i7d/p8eXIrIaS7Hr9MA7wLidegvuDUs="
    script:
      # Log in to ECR Private repo
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY_URL
      # Log in to Docker Hub
      - echo $DOCKER_HUB_TOKEN | docker login --username dts3logforwarderuser --password-stdin docker.io
      # Log in to ECR Public
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/dynatrace-oss
      # pull from ECR and push to Docker hub: dynatrace/dynatrace-aws-s3-log-forwarder:vx.y.z
      - docker pull ${ECR_REPOSITORY_URL}/dynatrace-aws-s3-log-forwarder:${COMMIT}-${LAMBDA_ARCH}
      - docker tag ${ECR_REPOSITORY_URL}/dynatrace-aws-s3-log-forwarder:${COMMIT}-${LAMBDA_ARCH} dynatrace/dynatrace-aws-s3-log-forwarder:${TRAVIS_TAG}-${LAMBDA_ARCH}
      - docker push dynatrace/dynatrace-aws-s3-log-forwarder:${TRAVIS_TAG}-${LAMBDA_ARCH}
      # Push to ECR Public
      - docker tag ${ECR_REPOSITORY_URL}/dynatrace-aws-s3-log-forwarder:${COMMIT}-${LAMBDA_ARCH} public.ecr.aws/dynatrace-oss/dynatrace-aws-s3-log-forwarder:${TRAVIS_TAG}-${LAMBDA_ARCH}
      - docker push public.ecr.aws/dynatrace-oss/dynatrace-aws-s3-log-forwarder:${TRAVIS_TAG}-${LAMBDA_ARCH}
      # Push templates to S3
      - ./scripts/update_version.sh
      - aws s3 cp template.yaml s3://dynatrace-aws-s3-log-forwarder-assets/${TRAVIS_TAG}/
      - aws s3 cp dynatrace-aws-s3-log-forwarder-configuration.yaml s3://dynatrace-aws-s3-log-forwarder-assets/${TRAVIS_TAG}/
      - aws s3 cp dynatrace-aws-s3-log-forwarder-s3-bucket-configuration.yaml s3://dynatrace-aws-s3-log-forwarder-assets/${TRAVIS_TAG}/
      - aws s3 cp eventbridge-cross-region-or-account-forward-rules.yaml s3://dynatrace-aws-s3-log-forwarder-assets/${TRAVIS_TAG}/
      - zip templates.zip template.yaml dynatrace-aws-s3-log-forwarder-configuration.yaml dynatrace-aws-s3-log-forwarder-s3-bucket-configuration.yaml eventbridge-cross-region-or-account-forward-rules.yaml
      - aws s3 cp templates.zip s3://dynatrace-aws-s3-log-forwarder-assets/${TRAVIS_TAG}/

